Please visit our sponsor

    //**************************************
    // for :Classe para Interbase. ***************** A Interbase class
    //**************************************
    Mauro J. D. Clemente, Agosto 2001.®
    //**************************************
    // Name: Classe para Interbase. ***************** A Interbase class
    // Description:É uma classe para trabalhar com Interbase, pode ser facilmente adaptada para trabalhar com qualquer outra base de dados.
    Você apenas cria um novo objeto, e chama a função para executar qualquer instrução SQL que desejar.
    **************************
    This is a class for work with Interbase databases, it can easy adapter for any other database, you call the object and the function for execute any SQL stantement.
    // By: Mauro J. D. Clemente
    //
    //
    // Inputs:Antes de executar deve-se alterar as configurações de conexão ao banco de dados, tais como: endereço e nome do BD, usuário e senha de acesso que estão na classe.
    uma variável deve ser declarada e instanciado um novo objecto assim:
    $var = new banco;
    para insert, update ou delete:
    $var->operacao("instrução sql");
    no caso de insert pode-se verificar a existência de um registro com os mesmo valores de chave primária com os seguintes parâmetros opcionais;
    nome da tabela, nome do campo chave e valor a ser pesquisado, passando a chamada assim:
    $var->operacao("insert into ...", "tabela", "campo chave", "valor");
    para select precisamos de outra variavel para conter os resultados
    $resultado = $var->operacao("instrucao sql");
    *****************************************
    Before exec don't forgot of modify the configuration of name, address, username and password for connection to Interbase database in class header .
    A variable for object:
    $var = new banco;
    for sql inserts, delete or update:
    $var->operacao("statement sql");
    In case of insert with search for indexes (primary key), can verify the values for consistent inserts, use this parameters:
    name of table, name of field primary key or index and value for verify. Ex.
    $var->operacao("insert into ...", "table", "field primary key", "value");
    for selects need other variable to assign values returned:
    $result = $var->operacao("statement sql");
    //
    // Returns:No caso de insert com verificação de chave se o retorno for a palavra "tem" significa que já existe o registro então os dados não serão inseridos.
    Em casos de select serão retornados os registros e forma de array multidimensional, tipo, $resultado[índice de linha][índice de campo] 
    Nos demais casos não haverá retorno de não houver erros, em caso de erro em qualquer circunstância a classe retornará o erro e a instrução sql inválida.
    ******************************
    In inserts with primary key verify the return can be the word "tem", this speak wath the value searched was found in table, the datas was not inserted in table.
    In selects the values will returned in a multidimensional array (matrix), with each register in one line and each field in one column: $result["Line index"]["field index"] = value frm table.
    In other cases if the operation don't had erros neverone value will be returned, in errors case the sql statement will be printed after error.
    //
    //Assumes:Qualquer dúvida entre em contato comigo maurojdc@hotmail.com
    //
    //Side Effects:None
    //This code is copyrighted and has limited warranties.
    //Please see http://www.Planet-Source-Code.com/xq/ASP/txtCodeId.405/lngWId.8/qx/vb/scripts/ShowCode.htm
    //for details.
    //**************************************
    
    //Classe que manipula as informações interagindo com o banco de dados (Interbase)
    class banco {
    //Variáveis de coneção ao banco de dados
    var $conexao;
    var $endereco = "10.0.0.2:e:\\bancos\\nome_do_banco.gdb";
    var $usuario = "nome_de_usuário";
    var $senha = "senha_para_o_banco_de_dados";
    //Função que conecta ao banco de dados
    function conecta() {
    $this->conexao = ibase_pconnect($this->endereco, $this->usuario, $this->senha)
    or die("Não foi possível conectar ao banco de dados.");
    }
    //Função que desconecta do banco de dados
    function desconecta() {
    ibase_close($this->conexao);
    }
    //Função que faz todas as operações no banco de dados
    function operacao($instrucao, $tabela="", $campo="", $valor="") {
    if (substr($instrucao, 0, 6) == "SELECT") {
    $this->conecta();
    $procura = ibase_query($this->conexao, $instrucao)
    or die("Erro no sql \"<b>$instrucao</b>\"");
    if (!ibase_fetch_object($procura)) {
    $this->desconecta();
    return "Nada";
    exit;
    }
    $linha = 0;
    $procura = ibase_query($this->conexao, $instrucao);
    while ($a = ibase_fetch_row($procura)) {
    $isso[$linha] = $a;
    $linha++;
    }
    return $isso;
    $this->desconecta();
    exit;
    } elseif ((substr($instrucao, 0, 6) == "UPDATE") || (substr($instrucao, 0, 6) == "DELETE") || (substr($instrucao, 0, 6) == "INSERT") || (substr($instrucao, 0, 4) == "EXEC")) {
    $this->conecta();
    if ((substr($instrucao, 0, 6) == "INSERT" || substr($instrucao, 0, 6) == "UPDATE") && $tabela != "") {
    $sql_v = "SELECT COUNT(*) as TEM FROM $tabela WHERE $campo='$valor'";
    $verifica = ibase_query($this->conexao, $sql_v)
    or die("Erro no sql \"<b>$sql_v</b>\"");
    $qtdd = ibase_fetch_object($verifica);
    if ($qtdd->TEM > 0) {
    $this->desconecta();
    return "tem";
    exit;
    }
    }
    $prepara = ibase_prepare($this->conexao, $instrucao)
    or die("Não foi possível preparar o sql \"<b>$instrucao</b>\"");
    $executa = ibase_execute($prepara)
    or die("Não foi possível executar o sql \"<b>$instrucao</b>\"");
    $this->desconecta();
    return "OK";
    exit;
    } else {
    die("Instrução sql inválida!! \"<b>$instrucao</b>\"");
    exit;
    }
    }
    }

		

