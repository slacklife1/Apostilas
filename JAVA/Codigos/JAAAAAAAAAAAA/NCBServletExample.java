/*
NCBServletExample
Visual Mining, Inc.

This servlet produces an HTML page that contains an image of a 
chart generated by NetCharts Beans.  

This servlet gets called twice in order to completely render a page 
containing a chart image.  The first pass fetches the chart and
uses a JSP page to build an HTML page that contains a reference to 
that chart.  The second pass provides the actual image data.

Pass 1:
     Creates an instance of the appropriate chart bean
     Loads the bean with some initial chart template
     Generates an image and stores it in a session variable
     Hand off the request to a JSP page for creation of HTML
     that contains an IMG tag for the chart.  The IMG SRC tag 
     should contain a reference back to this servlet.

Pass 2:
      extract the image data from the servlet session.
      deliver the image data to the client.

This servlet takes an optional parameters during pass 1: 
     "chartTemplateFile"
			the chart template file to load.
			if unspecified, a hardcoded barchart is used.
			The file must be in the web root directory. 
     "target"
     			the JSP page to hand the request off to for
			format and display.  if unspecified, a popup.jsp 
			is used.
*/
package ncbexamples;

import java.io.*;
import java.awt.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import netcharts.util.*;
import chartworks.cb.util.*;
import chartworks.cb.beans.*;

public class NCBServletExample extends HttpServlet
{
    protected static String DEFAULT_IMAGE_TYPE = "image/png";
    protected static String DEFAULT_TARGET = "/popup.jsp";
    static {
	    // Temporary license keys to be replaced with your valid license keys
	    netcharts.graphics.NFLicense2.setKey("NetChartsBeans4.0 EXPIRATION=31-DEC-2002 KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
	    netcharts.graphics.NFLicense2.setKey("NetCharts4.0 EXPIRATION=31-DEC-2002 BANNER=NO KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");

	    // set the application mode.
	    chartworks.cb.editors.NFEditor.setBeanContainer(chartworks.cb.editors.NFEditor.USERAPP);

	    // uncomment to activate debug output
	    //NFDebug.set("ALL");	    
    }

public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException 
{

	HttpSession session = null;
	NFGraph chart = null;

	// extract the imageID parameter from the request
	// the existance of this paramter implies that this is
	// pass 2.  The imageID parameter contains the name of
	// the session variable where the image created
	// in pass 1 is stored.
	String imageID = (String)request.getParameter("imageID");
	String target = (String)request.getParameter("target");
	if(target==null || target.trim().length()==0)
		target = DEFAULT_TARGET;
	
	// pass 2		
	if (imageID != null) {
		try {
			// extract the image data from the session variable
			session = request.getSession();	
			ServerGeneratedImage sgi = (ServerGeneratedImage)session.getAttribute(imageID);

			byte[] imageData = sgi.getImage();
			// build a response containing the image data
			response.setContentType(sgi.getMimeType());
			response.setContentLength(imageData.length);
			ServletOutputStream os = response.getOutputStream();
			os.write(imageData, 0, imageData.length);
			
			// deliver the response
			response.flushBuffer();		
		} catch (Exception e) {
			System.out.println("Exception while writing image data to response" + e);
			e.printStackTrace();
		}
		// pass 2 terminates here/
		return;			
	}

	// pass 1
	try {
		// Get the chart definition
		String cdlFile = request.getParameter("chartTemplateFile");
		if ((cdlFile != null) && (!cdlFile.equals(""))){
			String cdlFileSpec = getServletContext().getRealPath("/") +
				File.separatorChar + cdlFile;
			chart = NFGraph.getGraphBean(new File(cdlFileSpec));
		}
		else {
			// no chart tempate specified, use a hardcoded barchart
			chart = NFGraph.getGraphBean(getDefaultChart());
		}

		// if no valid chart object created, abort.
		if (chart == null) {
			throw new Exception("Cannot create chart");
		}

		// In the real world, the servlet could go and fetch data from
		// some datasource and add that data to the chart using the 
		// set() API.  See NCBSimpleExample.java.  Here we just display
		// the given chart template.
		chart.display();
		
		// Generate and store the image. Image data can be written to disk
		// or saved in the session.  Here we save the image
		// to a byte array which will be stored in a session variable.
		ServerGeneratedImage sgi = chart.getServerGeneratedImage(DEFAULT_IMAGE_TYPE, true);

		// store the image in a session variable.
		if (imageID != null)
			session.removeAttribute(imageID);	
		session = request.getSession(true);	
		session.setAttribute(sgi.getUniqueID(),sgi);	
		
		// Release graph for garbage collection.
		chart.stop();
		chart = null;

		// Add the image to the request so that we can then
		// forward the request to a JSP.  The JSP can
		// create the web page and embed the image map
		// Note that the IMG SRC tag should point 
		// back to this servlet, this time with a different
		// query string parameter, imageID. This parameter
		// should have the value of sgi.getUniqueID() since 
		// we used that to store the image in the session
		request.setAttribute("image", sgi);
		request.getRequestDispatcher(target).forward(request, response);
		
	}    
	catch (Exception e) {
		throw new UnavailableException("Error generating chart image: " +e);
	}
}

private String getDefaultChart() {

	// Get the servlets default chart template.
	// This could be a file loaded from disk.  
	// For this example, we'll hardcode it into a string.  
	// The chart is defined in Visual Mining's Chart Definition 
	// Language (CDL), a simple ASCII scripting language.  
	// These templates can be created manually, or with 
	// ChartWorks Designer. A description of CDL is
	// available in the Chart Definition Language Reference Manual.
	return	"ChartType       = BARCHART;" +
                "Background      = (white, NONE, 0); "+
        	"Grid            = (NULL,white, dimgray, mull, SIZE); "+
    		"Header          = (\"Weekday Network Load\", black, \"Helvetica\", 18); "+
    		"BottomTics      = (ON, black, \"Helvetica\", 11);"+
    		"LeftTics        = (ON, black, \"Helvetica\", 11);"+
    		"LeftScale       = (0, 100);"+
    		"BottomScale     = (-0.5, 4.5);"+
    		"LeftFormat      = (INTEGER);"+
    		"LeftTitle       = (\"MBytes\nPer Sec\", black, \"Helvetica\", 11);"+
    		"RightTitle      = (\"                \", black, \"Helvetica\", 11);"+
                "DwellLabel      = (\"\", black, \"Courier\", 12);"+
    		"BarLabels       = \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\";"+
    		"Bar3DDepth      =  3;"+		
    		"DataSets        = (\"Server #1\", x4E60A8);"+
		"DataSet1        = 55, 40,25,70,20";
}
}
